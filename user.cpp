#include "user.h"
#include "connection.h"
#include <QSqlQuery>
#include <QSqlError>
#include <QCryptographicHash>

User::User() {}

// âœ… Full constructor
User::User(const QString &firstname, const QString &lastname, const QString &password,
           const QString &phone, const QString &role, const QString &email, const QDateTime &dateTime) {
    this->firstname = firstname;
    this->lastname = lastname;
    this->password = password;
    this->phone = phone;
    this->role = role;
    this->email = email;
    this->dateTime = dateTime;
}

// Getters & Setters
QString User::getUserId() const {
    return UserId;
}

void User::setUserId(const QString &id) {
    UserId = id;
}

QString User::getFirstname() const {
    return firstname;
}

void User::setFirstname(const QString &fname) {
    firstname = fname;
}

QString User::getLastname() const {
    return lastname;
}

void User::setLastname(const QString &lname) {
    lastname = lname;
}

QString User::getPassword() const {
    return password;
}

void User::setPassword(const QString &pwd) {
    password = pwd;
}

QString User::getPhone() const {
    return phone;
}

void User::setPhone(const QString &ph) {
    phone = ph;
}

QString User::getRole() const {
    return role;
}

void User::setRole(const QString &r) {
    role = r;
}

QString User::getemail() const {
    return email;
}

void User::setemail(const QString &email) {
    this->email = email;
}

QDateTime User::getDateTime() const {
    return dateTime;
}

void User::setDateTime(const QDateTime &dt) {
    dateTime = dt;
}


// Inside the saveToDatabase function
bool User::saveToDatabase() {
    QSqlDatabase db = Connection::getDatabase();
    if (!db.isOpen()) {
        qDebug() << "Database is not open!";
        return false;
    }

    // Hash the password before saving it
    QByteArray hashedPassword = QCryptographicHash::hash(password.toUtf8(), QCryptographicHash::Sha256);
    QString hashedPasswordStr = hashedPassword.toHex();

    QSqlQuery query(db);
    // Insert query, without the UserId if it's auto-generated by the database
    query.prepare("INSERT INTO users (FIRSTNAME, LASTNAME, PASSWORD, PHONE, ROLE, DATETIME, EMAIL) "
                  "VALUES (?, ?, ?, ?, ?, TO_DATE(?, 'YYYY-MM-DD HH24:MI:SS'), ?)");

    query.addBindValue(firstname);
    query.addBindValue(lastname);
    query.addBindValue(hashedPasswordStr);
    query.addBindValue(phone);
    query.addBindValue(role);
    query.addBindValue(dateTime.toString("yyyy-MM-dd HH:mm:ss"));
    query.addBindValue(email);


    if (!query.exec()) {
        qDebug() << "Error saving user:" << query.lastError().text();
        return false;
    }

    // If the user ID is auto-generated, retrieve it after insert
    UserId = query.lastInsertId().toString();
    return true;
}




bool User::searchUserById(const QString &userId) {
    QSqlQuery query;
    query.prepare("SELECT * FROM users WHERE user_id = :userId");
    query.bindValue(":userId", userId);

    if (query.exec() && query.next()) {
        setUserId(query.value("user_id").toString());
        setFirstname(query.value("firstname").toString());
        setLastname(query.value("lastname").toString());
        setPassword(query.value("password").toString());
        setPhone(query.value("phone").toString());
        setRole(query.value("role").toString());
        setemail(query.value("email").toString());
        setDateTime(query.value("datetime").toDateTime());
        return true;
    }

    return false;
}


bool User::updateToDatabase() {
    // Validate required fields to ensure they're not empty or NULL
    if (firstname.isEmpty() || lastname.isEmpty() || password.isEmpty() || phone.isEmpty()) {
        qDebug() << "Error: One or more required fields are empty.";
        return false; // Return false if any required field is empty
    }

    QSqlQuery query;

    // Ensure that the datetime format matches Oracle's expected format (YYYY-MM-DD HH24:MI:SS)
    QString formattedDateTime = dateTime.toString("yyyy-MM-dd HH:mm:ss");

    // Prepare the SQL query to update the user record
    query.prepare("UPDATE users SET FIRSTNAME = ?, LASTNAME = ?, PASSWORD = ?,EMAIL = ?, PHONE = ?, ROLE = ?, DATETIME = TO_DATE(?, 'YYYY-MM-DD HH24:MI:SS') WHERE user_id = ?");

    // Bind values to the query
    query.addBindValue(firstname);
    query.addBindValue(lastname);
    query.addBindValue(password); // You should hash the password here before sending it to the database
    query.addBindValue(phone);
    query.addBindValue(role);
    query.addBindValue(formattedDateTime);
    query.addBindValue(email);
    query.addBindValue(UserId);
    // Execute the query and check for errors
    if (!query.exec()) {
        qDebug() << "Update failed:" << query.lastError().text();
        return false;
    }

    return true;
}

bool User::saveChanges() {
    // First, check if the user exists in the database
    if (!existsInDatabase()) {
        qDebug() << "User does not exist in the database!";
        return false;
    }

    // If the user exists, call the updateToDatabase function to save the changes
    return updateToDatabase();
}

bool User::existsInDatabase() {
    // Prepare the query to check if the user with the given ID exists
    QSqlQuery query;
    query.prepare("SELECT COUNT(*) FROM users WHERE user_id = :userId");
    query.bindValue(":userId", this->UserId);  // Bind the userId of the current User object

    if (query.exec()) {
        query.next();  // Move to the first result
        return query.value(0).toInt() > 0;  // If count > 0, the user exists
    } else {
        qDebug() << "Error checking user existence:" << query.lastError();
        return false;  // If there's an error, assume the user doesn't exist
    }
}
bool User::searchUserByPhone(const QString &phoneNumber, bool &found) {
    QSqlQuery query;
    query.prepare("SELECT * FROM users WHERE phone = :phone");
    query.bindValue(":phone", phoneNumber);

    if (query.exec() && query.next()) {
        UserId = query.value("user_id").toString();
        firstname = query.value("firstname").toString();
        lastname = query.value("lastname").toString();
        phone = query.value("phone").toString();
        role = query.value("role").toString();
        email = query.value("email").toString();
        dateTime = query.value("datetime").toDateTime();

        found = true;
        return true;
    } else {
        found = false;
        return false;
    }
}


bool User::deleteFromDatabase() {
    QSqlQuery query;
    query.prepare("DELETE FROM users WHERE user_id = :userId");
    query.bindValue(":userId", this->UserId);

    if (query.exec()) {
        return true;  // User deleted successfully
    } else {
        qDebug() << "Error deleting user:" << query.lastError();
        return false;  // Failed to delete user
    }
}


// login() checks if the credentials match in the database
bool User::login(const QString &firstName, const QString &lastName, const QString &inputPassword)
{
    QSqlQuery query;
    query.prepare("SELECT * FROM users WHERE firstname = :firstname AND lastname = :lastname");
    query.bindValue(":firstname", firstName);
    query.bindValue(":lastname", lastName);

    if (query.exec() && query.next()) {
        QString storedHash = query.value("password").toString();
        QByteArray inputHash = QCryptographicHash::hash(inputPassword.toUtf8(), QCryptographicHash::Sha256).toHex();

        qDebug() << "Login first name:" << firstName;
        qDebug() << "Login last name:" << lastName;
        qDebug() << "Stored hash:" << storedHash;
        qDebug() << "Input hash:" << inputHash;

        if (storedHash == inputHash) {
            setUserId(query.value("user_id").toString());
            setFirstname(firstName);
            setLastname(lastName);
            setPassword(storedHash);
            setPhone(query.value("phone").toString());
            setRole(query.value("role").toString());
            setemail(query.value("email").toString());
            setDateTime(query.value("datetime").toDateTime());
            return true;
        } else {
            qDebug() << "Password hash mismatch!";
        }
    } else {
        qDebug() << "Login query failed or no user found.";
        qDebug() << "Error:" << query.lastError().text();
    }

    return false;
}

// signUp() checks if the user already exists and registers them
bool User::signUp()
{
    if (existsInDatabase()) {
        qDebug() << "User already exists!";
        return false;
    }
    return saveToDatabase();
}
bool User::checkIfEmailExists(const QString &email, const QString &userId) {
    QSqlQuery query;
    query.prepare("SELECT COUNT(*) FROM users WHERE email = :email AND user_id != :user_id");
    query.bindValue(":email", email);
    query.bindValue(":user_id", userId);  // Ensuring that the current user's ID is excluded

    if (query.exec()) {
        query.next();
        int count = query.value(0).toInt();  // Get the number of rows returned
        return count > 0;  // If count > 0, the email exists
    } else {
        qDebug() << "Error checking email: " << query.lastError().text();
        return false;  // If query fails, return false
    }
}




